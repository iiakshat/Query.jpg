from dotenv import load_dotenv
import streamlit as st
import os
import time
import asyncio
from PIL import Image
import google.generativeai as genai

load_dotenv()

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
model=genai.GenerativeModel('gemini-1.5-pro')


st.set_page_config(page_title='Query.jpg')
st.header("Query.jpg")

context_prompt = """
You are an expert in understanding every type of image. We will upload multiple images of anything,
including handwritten notes, diagrams, or other content. You will be asked questions regarding the details 
that these images contain, and you have to answer those questions by considering the context of all provided images.
"""

prompt2 = """You are given with responses generated by a model
    for every image when multiple were given to it and was asked query : {input}
    Your task it to combine all the responses into one final response that answers the query.
    Do not tell if you combined any response. Your output should be a final response without any additional text.

    Here are the combined responses: {reponse}
    """

async def generate_response(prompt, image, query):
    response = model.generate_content([prompt, image, query])
    return response.text

async def get_response_async(images, query, prompt):
    tasks = [generate_response(prompt, image, query) for image in images]
    responses = await asyncio.gather(*tasks)

    return responses

def get_response(images, query, prompt):
    try:
        return asyncio.run(get_response_async(images, query, prompt))
    except Exception as e:
        print(f"Error during async processing: {e}.")

def input_image_details(uploaded_file):

    image_parts = []

    for file in uploaded_file:
        image_parts.append(
            {
               "mime_type":file.type,
               "data":file.getvalue() 
            }
        )

    return image_parts

def display(files):
    images = []
    for uploaded_file in files:
        image = Image.open(uploaded_file)
        images.append(image)

    max_images_per_row = 2
    if images:
        for i in range(0, len(images), max_images_per_row):
            row_images = images[i:i + max_images_per_row]
            cols = st.columns(len(row_images))
            for col, image in zip(cols, row_images):
                col.image(image, caption="Uploaded Image", width=300)

uploaded_file=st.file_uploader("Upload an image : ",type=["jpg","jpeg","png"], accept_multiple_files=True)

if uploaded_file:

    display(uploaded_file)
    input=st.text_input("What would you like to know: ",key='input')
    submit=st.button("Submit")

    if submit:
        image_data= input_image_details(uploaded_file)
        start = time.perf_counter()
        responses = get_response(image_data, input, context_prompt)

        response = "\n".join(responses)
        fresponse = model.generate_content(prompt2.format(input=input, reponse=response))
        st.write(fresponse.text)
        st.caption(f"Time taken: {round(time.perf_counter() - start, 2)}s")
